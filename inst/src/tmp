51a52
> int server_compute_dgeev_mgpu(  hideprintlog hideorprint  ) ;  // This function internally uses the static CSharedRegion * shrd_server object
52a54
> int server_compute_solve_mgpu(  hideprintlog hideorprint  ) ;  // This function internally uses the static CSharedRegion * shrd_server object
62a65,97
> magma_int_t 
> magma_dgeev_m	(	magma_vec_t 	jobvl,
> magma_vec_t 	jobvr,
> magma_int_t 	n,
> double * 	A,
> magma_int_t 	lda,
> double * 	wr,
> double * 	wi,
> double * 	VL,
> magma_int_t 	ldvl,
> double * 	VR,
> magma_int_t 	ldvr,
> double * 	work,
> magma_int_t 	lwork,
> magma_int_t * 	info 
> );		
> 
> extern magma_int_t 
> magma_dgeev	(	magma_vec_t 	jobvl,
> magma_vec_t 	jobvr,
> magma_int_t 	n,
> double * 	A,
> magma_int_t 	lda,
> double * 	wr,
> double * 	wi,
> double * 	VL,
> magma_int_t 	ldvl,
> double * 	VR,
> magma_int_t 	ldvr,
> double * 	work,
> magma_int_t 	lwork,
> magma_int_t * 	info 
> );		
91a127,141
> extern magma_int_t 
> magma_dgetri_gpu(magma_int_t n,
> magmaDouble_ptr dA,
> magma_int_t ldda,
> magma_int_t*  ipiv,
> magmaDouble_ptr  dwork,
> magma_int_t lwork,
> magma_int_t* info 
> )	
> 
> 
> 
> 
> 
> 
294c344
<           syevd_info = server_compute_syevdx_mgpu( main_args.msgChannel ) ;
---
>           syevd_info = server_compute_dgeev_mgpu( main_args.msgChannel ) ;
299c349
<             ss_string << " info != 0 returned from server_compute_syevdx_mgpu() " << std::endl  ;
---
>             ss_string << " info != 0 returned from server_compute_dgeev_mgpu() " << std::endl  ;
323c373
< // This is the modified original La_rs() code, with added magma 2stage symmetric eigenvalue decomposition
---
> // This is the modified original La_rs() code, with added magma 2stage non-symmetric eigenvalue decomposition
326c376
< int server_compute_syevdx_mgpu( hideprintlog hideorprint )
---
> int server_compute_dgeev_mgpu( hideprintlog hideorprint )
328,339c378,389
< 
<   magma_int_t n, n2, lwork, info = 0;  // define MAGMA_ILP64 to get these as 64 bit integers
<         magma_vec_t jobv ;  // tell the function if we want eigenvectors or not
<         if (shrd_server->_weWantVectors == WANTVECTORS)
<                 jobv = MagmaVec;  // we want vectors returned, not just eigenvalues
<         else
<                 jobv = MagmaNoVec ;
<         magma_uplo_t uplo =  MagmaLower; // MagmaUpper; 
<         magma_range_t range = magma_range_const('A') ; // MagmaRangeAll ;
< 
<         double fraction = 1.0 ;
<   double *work, *rvectors_ptr, *rvalues_ptr ;
---
>   
>   magma_int_t n, n2,  lwork2, info = 0;  // define MAGMA_ILP64 to get these as 64 bit integers
> 	magma_vec_t jobv ;  // tell the function if we want eigenvectors or not
> 	if (shrd_server->_weWantVectors == WANTVECTORS)
> 		jobv = MagmaVec;  // we want vectors returned, not just eigenvalues
> 	else
> 		jobv = MagmaNoVec ;
> 	magma_uplo_t uplo =  MagmaLower; // MagmaUpper;	
> 	magma_range_t range = magma_range_const('A') ; // MagmaRangeAll ;
> 	
> 	double fraction = 1.0 ;
>   double  *rvectors_ptr, *rvalues_ptr ;
342,344c392,394
< 
< 
< 
---
>   
>  
>     
347c397
<     std::cerr << " MAGMA_EVD_SERVER Error: server_compute_syevdx_mgpu(): shrd_server object is NULL" << std::endl ;
---
>     std::cerr << " MAGMA_EVD_SERVER Error: server_compute_dgeev_mgpu(): shrd_server object is NULL" << std::endl ;
350,356c400,406
< 
<         n = shrd_server->_matrix_dim ;
<         n2     = n*n;
<         magma_int_t il = 1;
<         magma_int_t iu = n;
<         il = 1;
<         iu = (magma_int_t) (n);
---
>   
> 	n = shrd_server->_matrix_dim ;
> 	n2     = n*n;
> 	magma_int_t il = 1;
> 	magma_int_t iu = n;
> 	il = 1;
> 	iu = (magma_int_t) (n);
359,364c409,414
<         std::cout << " MAGMA_EVD_SERVER Info: dsyevdx called using: jobv = " << lapack_vec_const(jobv) ;
<         std::cout << " , range = "  << lapack_range_const(range) ;
<         std::cout << " , uplo = " << lapack_uplo_const(uplo) ;
<         std::cout << ", fraction = " << fraction ;
<         std::cout << ", numgpus = " << shrd_server->_numgpus << std::endl ;
<         std::cerr << " MAGMA_EVD_SERVER:  sizeof(magma_int_t)= " << sizeof(magma_int_t)  << std::endl ;
---
>   	std::cout << " MAGMA_EVD_SERVER Info: dgeev  called using: jobv = " << lapack_vec_const(jobv) ;
>   	std::cout << " , range = "  << lapack_range_const(range) ;
>   	std::cout << " , uplo = " << lapack_uplo_const(uplo) ;
>   	std::cout << ", fraction = " << fraction ;
>   	std::cout << ", numgpus = " << shrd_server->_numgpus << std::endl ;
>   	std::cerr << " MAGMA_EVD_SERVER:  sizeof(magma_int_t)= " << sizeof(magma_int_t)  << std::endl ;
365a416,425
> 	
> 	// We could create a copy of the input matrix, in 'pinned' memory
> 	// rvectors_ptr (was h_R) will initially be a copy of the input matrix  // TESTING_MALLOC_PIN( h_R,    double, n2    );
> 	/*if ( MAGMA_SUCCESS != magma_malloc_pinned( (void**) &rvectors_ptr, (n2)*sizeof(double) )) {       
> 		shrd_server->error_and_die("Error magma_dgeev_mgpu(): !!!! magma_malloc_pinned failed for: rvectors_ptr") ; 		                                                           
> 	}*/
> 	
> 	//Rcpp::NumericVector rvalues(n) 	 ;
> 	rvalues_ptr = shrd_server->_values ;
> 	rvectors_ptr = shrd_server->_vectors ;  // was rx
367,375d426
<         // We could create a copy of the input matrix, in 'pinned' memory
<         // rvectors_ptr (was h_R) will initially be a copy of the input matrix  // TESTING_MALLOC_PIN( h_R,    double, n2    );
<         /*if ( MAGMA_SUCCESS != magma_malloc_pinned( (void**) &rvectors_ptr, (n2)*sizeof(double) )) {       
<                 shrd_server->error_and_die("Error magma_syevdx_mgpu(): !!!! magma_malloc_pinned failed for: rvectors_ptr") ;                                                                       
<         }*/
< 
<         //Rcpp::NumericVector rvalues(n)         ;
<         rvalues_ptr = shrd_server->_values ;
<         rvectors_ptr = shrd_server->_vectors ;  // was rx
376a428,435
>        // AWG
>        // Make copy of rvectors_ptr => *A 
>        double *A;
>        magma_dmalloc_cpu(&A, n2);   // to house data that will be lost 
>        for(int i=0; i<n2; i++){
>           A[i] = rvectors_ptr[i];
>        }
> 	
378c437
<   lwork = -1; liwork = -1;
---
>   // ----> lwork = -1; liwork = -1;
387c446
< 
---
>         
390a450,501
>    
> // ---->   magma_dgeev_getworksize(n, threads, b_wantVects, &lwork, &liwork); 
>    
>   // AWG
>   // get work size
>   magma_int_t lda, LDVL, LDVR;
>   LDVL=n;
>   LDVR=n;
>   lda   = n;
>   n2    = lda*n;
>   double *wr;
>      if ( MAGMA_SUCCESS != magma_dmalloc_cpu(&wr, n) )
>      {
>         shrd_server->error_and_die(" MAGMA_EVD_SERVER Error: magma_dgeev_mgpu() magma_dmalloc_cpu failed for: wr " );
>      }
>   double *wl;
>      if ( MAGMA_SUCCESS != magma_dmalloc_cpu(&wl, n) )
>      {
>         shrd_server->error_and_die(" MAGMA_EVD_SERVER Error: magma_dgeev_mgpu() magma_dmalloc_cpu failed for: wl " );
>      }
>   double *VL;
>      if ( MAGMA_SUCCESS != magma_dmalloc_cpu(&VL,  LDVL*n) )
>      {
>         shrd_server->error_and_die(" MAGMA_EVD_SERVER Error: magma_dgeev_mgpu() magma_dmalloc_cpu failed for: VL " );
>      }
>   double *VR;
>      if ( MAGMA_SUCCESS != magma_dmalloc_cpu(&VR,  LDVR*n) )
>      {
>         shrd_server->error_and_die(" MAGMA_EVD_SERVER Error: magma_dgeev_mgpu() magma_dmalloc_cpu failed for: VR " );
>      }
>   magma_int_t lwork = -1;
>   double work[1];   
> 
> 
>   // get optimal workspace size  
>    magma_dgeev(MagmaVec, MagmaNoVec, n, NULL, lda, NULL, NULL, NULL, LDVL, NULL, LDVR, work, -1, &info );	
> 
>    lwork = work[0];
>    double *h_work;
>      if ( MAGMA_SUCCESS != magma_dmalloc_cpu(&h_work, lwork) )
>      {
>         shrd_server->error_and_die(" MAGMA_EVD_SERVER Error: magma_dgeev_mgpu() magma_dmalloc_cpu failed for: h_work  " );
>      }
>  
>   // Perform analysis 
>   if (shrd_server->_numgpus == 1) {
>        magma_dgeev(MagmaNoVec, MagmaVec, n, A, lda, rvalues_ptr, wl, VL, LDVL, rvectors_ptr, LDVR, h_work,
>                       lwork, &info);
>   } else {
>        magma_dgeev_m(MagmaNoVec, MagmaVec, n, A, lda, rvalues_ptr, wl, VL, LDVL, rvectors_ptr, LDVR, h_work,
>                       lwork, &info);
>   }
392d502
<   magma_dsyevdx_getworksize(n, threads, b_wantVects, &lwork, &liwork);
394,397d503
<         if ( MAGMA_SUCCESS != magma_malloc_pinned( (void**) &work, (lwork)*sizeof(double) ))
<         {
<                 shrd_server->error_and_die(" MAGMA_EVD_SERVER Error: magma_syevdx_mgpu() magma_malloc_pinned failed for: work" );
<         }
399,401d504
<         if ( MAGMA_SUCCESS != magma_malloc_cpu( (void**) &iwork, (liwork)*sizeof(magma_int_t) )) {
<                 shrd_server->error_and_die("MAGMA_EVD_SERVER Error: magma_syevdx_mgpu() magma_malloc_cpu failed for: iwork" );
<         }
403,404c506,511
<         m = 0;
<         if (hideorprint == PRINT) std::cout << "About to call magma_dsyevdx_2stage()..."<< std::endl ;
---
> magma_free_cpu( h_work);
> magma_free_cpu( A);
> magma_free_cpu( wr);
> magma_free_cpu( wl);
> magma_free_cpu( VL);
> magma_free_cpu( VR);
406,414c513,539
<         if (shrd_server->_numgpus == 1) {
<       //printf("calling dsyevdx_2stage 1 GPU\n");
<       magma_dsyevdx_2stage( jobv, range, uplo, n,
<                       rvectors_ptr, n,
<                       vl, vu, il, iu,
<                       &m, rvalues_ptr,
<                       work, lwork,
<                       iwork, liwork,
<                       &info);
---
> 
> 
> return (info) ;
>  
> 
>  
> 	if ( MAGMA_SUCCESS != magma_malloc_pinned( (void**) &work, (lwork)*sizeof(double) )) 
> 	{      
> 		shrd_server->error_and_die(" MAGMA_EVD_SERVER Error: magma_dgeev_mgpu() magma_malloc_pinned failed for: work" );                                                         
> 	}
> 
> 	if ( MAGMA_SUCCESS != magma_malloc_cpu( (void**) &iwork, (liwork)*sizeof(magma_int_t) )) {      
> 		shrd_server->error_and_die("MAGMA_EVD_SERVER Error: magma_dgeev_mgpu() magma_malloc_cpu failed for: iwork" );                                                          
> 	}		
> 	
> 	m = 0; 
> 	if (hideorprint == PRINT) std::cout << "About to call magma_dgeev()..."<< std::endl ;
>    
> 	if (shrd_server->_numgpus == 1) {
>       //printf("calling dgeev 1 GPU\n");
>       magma_dsyevdx_2stage( jobv, range, uplo, n, 
>                       rvectors_ptr, n, 
>                       vl, vu, il, iu, 
>                       &m, rvalues_ptr, 
>                       work, lwork, 
>                       iwork, liwork, 
>                       &info);	
416,422c541,547
<       //printf("calling dsyevdx_2stage_m %ld GPU\n", (long int) opts.ngpu);
<       magma_dsyevdx_2stage_m(shrd_server->_numgpus, jobv, range, uplo, n,
<                       rvectors_ptr, n,
<                       vl, vu, il, iu,
<                       &m, rvalues_ptr,
<                       work, lwork,
<                       iwork, liwork,
---
>       //printf("calling dgeev_m %ld GPU\n", (long int) opts.ngpu);
>       magma_dsyevdx_2stage_m(shrd_server->_numgpus, jobv, range, uplo, n, 
>                       rvectors_ptr, n, 
>                       vl, vu, il, iu, 
>                       &m, rvalues_ptr, 
>                       work, lwork, 
>                       iwork, liwork, 
425c550
< 
---
>   
435c560
< 
---
>   
438,440c563,565
< 
<         return (info) ;
< 
---
>    
> 	return (info) ;
> 	
443,450d567
< 
< 
< 
< 
< 
< 
< 
< 
482c599
<       std::cerr << " MAGMA_EVD_SERVER Error: server_init(): Please link syevd_server executable to MAGMA built with -DMAGMA_ILP64  "  << std::endl ;
---
>       std::cerr << " MAGMA_EVD_SERVER Error: server_init(): Please link nonsyevd_server executable to MAGMA built with -DMAGMA_ILP64  "  << std::endl ;
667c784
< 	  //Rcpp::Rcout << "MagmaEigen: cuDeviceGet():" << std::endl ;
---
> 	  //Rcpp::Rcout << "MagmaEigenNonsym: cuDeviceGet():" << std::endl ;
669c786
< 	  //Rcpp::Rcout << "MagmaEigen: cuDeviceGetName():" << std::endl ;
---
> 	  //Rcpp::Rcout << "MagmaEigenNonsym: cuDeviceGetName():" << std::endl ;
671c788
< 	  //Rcpp::Rcout << "MagmaEigen: cuDeviceComputeCapability():" << std::endl ;
---
> 	  //Rcpp::Rcout << "MagmaEigenNonsym: cuDeviceComputeCapability():" << std::endl ;
673c790
< 	  //Rcpp::Rcout << "MagmaEigen: cuDeviceTotalMem():" << std::endl ;
---
> 	  //Rcpp::Rcout << "MagmaEigenNonsym: cuDeviceTotalMem():" << std::endl ;
675c792
< 	  //Rcpp::Rcout << "MagmaEigen: cuDeviceGetAttribute():" << std::endl ;
---
> 	  //Rcpp::Rcout << "MagmaEigenNonsym: cuDeviceGetAttribute():" << std::endl ;
834,835c951,952
<       std::cerr << " MAGMA_EVD_SERVER Error: Recompile the syevd_server executable (using Make_SYEVD_Server()) specifying " << std::endl ;
<       std::cerr << " MAGMA_EVD_SERVER Error: an available platform (as seen above)in the <R_LIB>/MagmaEigen/src/make.inc file " << std::endl ;
---
>       std::cerr << " MAGMA_EVD_SERVER Error: Recompile the nonsyevd_server executable (using Make_SYEVD_Server()) specifying " << std::endl ;
>       std::cerr << " MAGMA_EVD_SERVER Error: an available platform (as seen above)in the <R_LIB>/MagmaEigenNonsym/src/make.inc file " << std::endl ;
